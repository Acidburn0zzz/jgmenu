Let's use python3. Writing code which is compatible with both python2 and 3
is possible but introduces a few issues:

  - Additional burden when testing code

  - Unnecessary learning curve for devs

A simple '#!/usr/bin/env python3' works on most systems, but not all.

Therefore, in jgmenu we use '#!/usr/bin/env python3' by default, but support
a Makefile option to substitue this shebang with a polyglot which finds the
python3.x binary in real-time. (Thanks to Ovidiu [o9000] for this nifty
solution.) It is invoked by:

    make install PYTHON3_POLYGLOT=1

The code looks like this, but has a few more 3.x in it:

    #!/bin/sh
    ''''which python3.6 >/dev/null 2>&1 && exec python3.6 "$0" "$@" # '''
    ''''which python3.5 >/dev/null 2>&1 && exec python3.5 "$0" "$@" # '''
    ''''exec echo "fatal: cannot find python3.x binary" # '''

Quick explaination:
  - sh interprets it is two empty strings followed by the 'command'
  - python interprets it as string definitions using 3 single quotes

The advantage of this wrapper compared with a hardcoded python-path is
that if python is upversioned, the scripts won't break.

Further considerations regarding the choice of the python-shebang include
the following:

  - The python binaries and symlinks reside in different directories
    (e.g. /usr/bin and /usr/local/bin) on different Unix-like OSs

  - Some OSs don't have 'env' installed

  - Although python3 has been around since 2008, some OSs cling
    on to python2.7 as a "default" for legacy scripts.

  - There is no consistency regarding what 'python' points to.
    PEP-0394 suggests that 'python' should point to 'python2' but some
    distros (e.g. Arch) has it pointing to 'python3'
    See https://www.python.org/dev/peps/pep-0394/

  - Some OSs don't have python2 and python3 symlinks but just the actual
    python2.7 and python3.x binaries.
